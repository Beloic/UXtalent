#!/usr/bin/env node

/**
 * Script de test pour v√©rifier le flux de paiement Stripe
 * Ce script simule un paiement r√©ussi et v√©rifie que le profil utilisateur est mis √† jour
 */

import fetch from 'node-fetch';

// Configuration
const API_BASE_URL = 'http://localhost:3001';
const TEST_EMAIL = 'test-payment@example.com';

// Fonction pour cr√©er un candidat de test
async function createTestCandidate() {
  console.log('üîß Cr√©ation du candidat de test...');
  
  const candidateData = {
    name: 'Test Payment User',
    email: TEST_EMAIL,
    title: 'D√©veloppeur UX',
    location: 'Paris',
    bio: 'Candidat de test pour v√©rifier le flux de paiement',
    skills: ['UX Design', 'Figma', 'Prototypage'],
    status: 'approved',
    plan_type: 'free'
  };

  try {
    const response = await fetch(`${API_BASE_URL}/api/candidates`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      },
      body: JSON.stringify(candidateData)
    });

    if (response.ok) {
      const candidate = await response.json();
      console.log('‚úÖ Candidat de test cr√©√©:', candidate.id);
      return candidate;
    } else {
      console.log('‚ÑπÔ∏è Candidat existe d√©j√† ou erreur:', response.status);
      // Essayer de r√©cup√©rer le candidat existant
      const getResponse = await fetch(`${API_BASE_URL}/api/candidates/profile/${encodeURIComponent(TEST_EMAIL)}`);
      if (getResponse.ok) {
        const candidate = await getResponse.json();
        console.log('‚úÖ Candidat existant r√©cup√©r√©:', candidate.id);
        return candidate;
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du candidat:', error.message);
  }
}

// Fonction pour v√©rifier le plan actuel
async function checkCurrentPlan() {
  console.log('üîç V√©rification du plan actuel...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/candidates/profile/${encodeURIComponent(TEST_EMAIL)}`);
    
    if (response.ok) {
      const candidate = await response.json();
      console.log('üìä Plan actuel:', candidate.plan || candidate.planType || 'free');
      return candidate;
    } else {
      console.error('‚ùå Impossible de r√©cup√©rer le profil:', response.status);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du plan:', error.message);
  }
}

// Fonction pour simuler un paiement Premium
async function simulatePremiumPayment() {
  console.log('üí≥ Simulation d\'un paiement Premium...');
  
  try {
    // Simuler l'appel API que fait le webhook Stripe
    const response = await fetch(`${API_BASE_URL}/api/candidates/email/${encodeURIComponent(TEST_EMAIL)}/plan`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      },
      body: JSON.stringify({ 
        planType: 'premium', 
        durationMonths: 1 
      })
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Paiement Premium simul√© avec succ√®s:', result);
      return result;
    } else {
      const error = await response.text();
      console.error('‚ùå Erreur lors de la simulation du paiement:', response.status, error);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la simulation du paiement:', error.message);
  }
}

// Fonction pour simuler un paiement Pro
async function simulateProPayment() {
  console.log('üí≥ Simulation d\'un paiement Pro...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/candidates/email/${encodeURIComponent(TEST_EMAIL)}/plan`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      },
      body: JSON.stringify({ 
        planType: 'pro', 
        durationMonths: 1 
      })
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Paiement Pro simul√© avec succ√®s:', result);
      return result;
    } else {
      const error = await response.text();
      console.error('‚ùå Erreur lors de la simulation du paiement:', response.status, error);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la simulation du paiement:', error.message);
  }
}

// Fonction pour nettoyer le candidat de test
async function cleanupTestCandidate() {
  console.log('üßπ Nettoyage du candidat de test...');
  
  try {
    // Remettre le plan √† gratuit
    const response = await fetch(`${API_BASE_URL}/api/candidates/email/${encodeURIComponent(TEST_EMAIL)}/plan`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      },
      body: JSON.stringify({ 
        planType: 'free', 
        durationMonths: 1 
      })
    });

    if (response.ok) {
      console.log('‚úÖ Candidat remis au plan gratuit');
    } else {
      console.log('‚ö†Ô∏è Impossible de remettre le plan √† gratuit');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error.message);
  }
}

// Fonction principale
async function runTest() {
  console.log('üöÄ D√©but du test du flux de paiement Stripe\n');
  
  try {
    // 1. Cr√©er ou r√©cup√©rer le candidat de test
    const candidate = await createTestCandidate();
    if (!candidate) {
      console.error('‚ùå Impossible de cr√©er/r√©cup√©rer le candidat de test');
      return;
    }
    
    console.log('\n' + '='.repeat(50));
    
    // 2. V√©rifier le plan initial
    await checkCurrentPlan();
    
    console.log('\n' + '='.repeat(50));
    
    // 3. Simuler un paiement Premium
    await simulatePremiumPayment();
    
    console.log('\n' + '='.repeat(50));
    
    // 4. V√©rifier que le plan a √©t√© mis √† jour
    await checkCurrentPlan();
    
    console.log('\n' + '='.repeat(50));
    
    // 5. Simuler un paiement Pro
    await simulateProPayment();
    
    console.log('\n' + '='.repeat(50));
    
    // 6. V√©rifier que le plan a √©t√© mis √† jour
    await checkCurrentPlan();
    
    console.log('\n' + '='.repeat(50));
    
    // 7. Nettoyer
    await cleanupTestCandidate();
    
    console.log('\n‚úÖ Test du flux de paiement termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
runTest();

export {
  createTestCandidate,
  checkCurrentPlan,
  simulatePremiumPayment,
  simulateProPayment,
  cleanupTestCandidate
};
