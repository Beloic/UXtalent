#!/bin/bash

# üîê Script de g√©n√©ration des secrets pour UX Jobs Pro
# Usage: ./scripts/generate-secrets.sh

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    if ! command -v openssl &> /dev/null; then
        error "OpenSSL n'est pas install√©"
    fi
    
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
    fi
    
    success "‚úÖ Pr√©requis v√©rifi√©s"
}

# G√©n√©rer les secrets
generate_secrets() {
    log "üîê G√©n√©ration des secrets de s√©curit√©..."
    
    # Cr√©er le fichier de secrets
    SECRETS_FILE="secrets-generated.txt"
    
    echo "# üîê Secrets g√©n√©r√©s pour UX Jobs Pro" > "$SECRETS_FILE"
    echo "# G√©n√©r√© le: $(date)" >> "$SECRETS_FILE"
    echo "# ‚ö†Ô∏è  IMPORTANT: Ces secrets sont sensibles, ne les partagez jamais!" >> "$SECRETS_FILE"
    echo "" >> "$SECRETS_FILE"
    
    # JWT Secret
    JWT_SECRET=$(openssl rand -base64 32)
    echo "JWT_SECRET=$JWT_SECRET" >> "$SECRETS_FILE"
    log "‚úÖ JWT_SECRET g√©n√©r√©"
    
    # Admin Token Secret
    ADMIN_TOKEN_SECRET=$(openssl rand -base64 32)
    echo "ADMIN_TOKEN_SECRET=$ADMIN_TOKEN_SECRET" >> "$SECRETS_FILE"
    log "‚úÖ ADMIN_TOKEN_SECRET g√©n√©r√©"
    
    # Session Secret
    SESSION_SECRET=$(openssl rand -base64 32)
    echo "SESSION_SECRET=$SESSION_SECRET" >> "$SECRETS_FILE"
    log "‚úÖ SESSION_SECRET g√©n√©r√©"
    
    # API Key pour les webhooks
    API_KEY=$(openssl rand -hex 32)
    echo "API_KEY=$API_KEY" >> "$SECRETS_FILE"
    log "‚úÖ API_KEY g√©n√©r√©"
    
    # Encryption Key pour les donn√©es sensibles
    ENCRYPTION_KEY=$(openssl rand -base64 32)
    echo "ENCRYPTION_KEY=$ENCRYPTION_KEY" >> "$SECRETS_FILE"
    log "‚úÖ ENCRYPTION_KEY g√©n√©r√©"
    
    success "‚úÖ Tous les secrets g√©n√©r√©s"
}

# G√©n√©rer les cl√©s SSH
generate_ssh_keys() {
    log "üîë G√©n√©ration des cl√©s SSH..."
    
    SSH_DIR="ssh-keys"
    mkdir -p "$SSH_DIR"
    
    # G√©n√©rer une paire de cl√©s SSH
    ssh-keygen -t rsa -b 4096 -f "$SSH_DIR/deploy_key" -N "" -C "deploy@ux-jobs-pro"
    
    echo "" >> "$SECRETS_FILE"
    echo "# üîë Cl√©s SSH g√©n√©r√©es" >> "$SECRETS_FILE"
    echo "DEPLOY_SSH_PRIVATE_KEY=$(cat $SSH_DIR/deploy_key)" >> "$SECRETS_FILE"
    echo "DEPLOY_SSH_PUBLIC_KEY=$(cat $SSH_DIR/deploy_key.pub)" >> "$SECRETS_FILE"
    
    log "‚úÖ Cl√©s SSH g√©n√©r√©es dans le dossier $SSH_DIR/"
    success "‚úÖ Cl√©s SSH g√©n√©r√©es"
}

# Cr√©er le fichier .env de production
create_production_env() {
    log "üìù Cr√©ation du fichier .env de production..."
    
    ENV_FILE=".env.production.generated"
    
    echo "# Configuration Supabase" > "$ENV_FILE"
    echo "VITE_SUPABASE_URL=https://ktfdrwpvofxuktnunukv.supabase.co" >> "$ENV_FILE"
    echo "VITE_SUPABASE_ANON_KEY=your-anon-key-here" >> "$ENV_FILE"
    echo "SUPABASE_SERVICE_KEY=your-service-key-here" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    echo "# Configuration du serveur" >> "$ENV_FILE"
    echo "PORT=3001" >> "$ENV_FILE"
    echo "NODE_ENV=production" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    echo "# Configuration de s√©curit√©" >> "$ENV_FILE"
    echo "JWT_SECRET=$JWT_SECRET" >> "$ENV_FILE"
    echo "ADMIN_TOKEN_SECRET=$ADMIN_TOKEN_SECRET" >> "$ENV_FILE"
    echo "SESSION_SECRET=$SESSION_SECRET" >> "$ENV_FILE"
    echo "API_KEY=$API_KEY" >> "$ENV_FILE"
    echo "ENCRYPTION_KEY=$ENCRYPTION_KEY" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    echo "# Configuration de d√©ploiement" >> "$ENV_FILE"
    echo "DEPLOY_HOST=your-server-host" >> "$ENV_FILE"
    echo "DEPLOY_USER=your-deploy-user" >> "$ENV_FILE"
    echo "DEPLOY_PATH=/var/www/ux-jobs-pro" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    echo "# Configuration de base de donn√©es" >> "$ENV_FILE"
    echo "DATABASE_URL=your-database-url-here" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    echo "# Configuration de monitoring" >> "$ENV_FILE"
    echo "SENTRY_DSN=your-sentry-dsn-here" >> "$ENV_FILE"
    echo "LOG_LEVEL=info" >> "$ENV_FILE"
    
    success "‚úÖ Fichier .env de production cr√©√©: $ENV_FILE"
}

# Cr√©er les instructions de configuration
create_setup_instructions() {
    log "üìã Cr√©ation des instructions de configuration..."
    
    INSTRUCTIONS_FILE="SETUP_INSTRUCTIONS.md"
    
    cat > "$INSTRUCTIONS_FILE" << 'EOF'
# üöÄ Instructions de Configuration des Secrets

## üìã Secrets √† Configurer dans GitHub

### 1. Aller sur GitHub
1. Allez sur votre repository GitHub
2. Cliquez sur **Settings** (onglet en haut)
3. Dans le menu de gauche, cliquez sur **Secrets and variables**
4. Cliquez sur **Actions**

### 2. Ajouter les Secrets

Copiez chaque secret depuis le fichier `secrets-generated.txt` :

#### Secrets Supabase (OBLIGATOIRES)
- `VITE_SUPABASE_URL` = `https://ktfdrwpvofxuktnunukv.supabase.co`
- `VITE_SUPABASE_ANON_KEY` = Votre cl√© anonyme Supabase
- `SUPABASE_SERVICE_KEY` = Votre cl√© de service Supabase

#### Secrets de S√©curit√© (OBLIGATOIRES)
- `JWT_SECRET` = (g√©n√©r√© automatiquement)
- `ADMIN_TOKEN_SECRET` = (g√©n√©r√© automatiquement)
- `SESSION_SECRET` = (g√©n√©r√© automatiquement)
- `API_KEY` = (g√©n√©r√© automatiquement)
- `ENCRYPTION_KEY` = (g√©n√©r√© automatiquement)

#### Secrets de D√©ploiement (OBLIGATOIRES)
- `DEPLOY_HOST` = IP ou domaine de votre serveur
- `DEPLOY_USER` = Utilisateur SSH (ex: ubuntu, deploy)
- `DEPLOY_SSH_KEY` = Cl√© priv√©e SSH (g√©n√©r√©e automatiquement)
- `DEPLOY_PATH` = Chemin de d√©ploiement (ex: /var/www/ux-jobs-pro)

#### Secrets Optionnels
- `PORT` = Port du serveur (d√©faut: 3001)
- `DEPLOY_PORT` = Port SSH (d√©faut: 22)
- `DATABASE_URL` = URL de base de donn√©es
- `SENTRY_DSN` = DSN Sentry pour monitoring
- `LOG_LEVEL` = Niveau de log (d√©faut: info)

### 3. Configuration du Serveur

#### Installer les cl√©s SSH
```bash
# Copier la cl√© publique sur le serveur
ssh-copy-id -i ssh-keys/deploy_key.pub user@your-server.com

# Ou manuellement
cat ssh-keys/deploy_key.pub >> ~/.ssh/authorized_keys
```

#### Tester la connexion
```bash
ssh -i ssh-keys/deploy_key user@your-server.com
```

### 4. D√©ploiement

Une fois tous les secrets configur√©s :
1. Le workflow GitHub Actions se d√©clenchera automatiquement
2. Surveillez les logs dans **Actions** de GitHub
3. V√©rifiez que l'application est accessible

## üõ°Ô∏è S√©curit√©

- ‚ö†Ô∏è **NE JAMAIS** commiter les fichiers de secrets
- ‚ö†Ô∏è **NE JAMAIS** partager les secrets par email/chat
- ‚úÖ Sauvegardez les secrets de mani√®re s√©curis√©e
- ‚úÖ Changez r√©guli√®rement les secrets

## üÜò Support

En cas de probl√®me :
1. V√©rifiez les logs GitHub Actions
2. V√©rifiez la configuration des secrets
3. Testez la connexion SSH
4. Consultez le guide DEPLOYMENT_GUIDE.md
EOF

    success "‚úÖ Instructions cr√©√©es: $INSTRUCTIONS_FILE"
}

# Fonction principale
main() {
    log "üöÄ D√©but de la g√©n√©ration des secrets UX Jobs Pro"
    
    check_prerequisites
    generate_secrets
    generate_ssh_keys
    create_production_env
    create_setup_instructions
    
    success "üéâ G√©n√©ration termin√©e avec succ√®s!"
    
    echo ""
    echo "üìÅ Fichiers cr√©√©s :"
    echo "  - $SECRETS_FILE (secrets g√©n√©r√©s)"
    echo "  - $ENV_FILE (configuration production)"
    echo "  - $INSTRUCTIONS_FILE (instructions de setup)"
    echo "  - ssh-keys/ (cl√©s SSH)"
    echo ""
    echo "üîê Prochaines √©tapes :"
    echo "  1. Configurer les secrets dans GitHub Actions"
    echo "  2. Installer les cl√©s SSH sur le serveur"
    echo "  3. Tester le d√©ploiement"
    echo ""
    echo "‚ö†Ô∏è  IMPORTANT: Ne commitez JAMAIS ces fichiers de secrets!"
}

# Ex√©cution du script
main "$@"
