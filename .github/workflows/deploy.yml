name: 🚀 Déploiement UX Jobs Pro

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job de tests et validation
  test:
    name: 🧪 Tests et Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Installer les dépendances
        run: npm ci

      - name: 🔍 Audit de sécurité
        run: |
          echo "🔍 Audit des dépendances..."
          npm audit --audit-level=high || true
          echo "⚠️ Note: Les vulnérabilités modérées sont acceptées pour ce déploiement"

      - name: 🏗️ Build de l'application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: 🧪 Tests (si disponibles)
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "Aucun script de test trouvé"
          fi

  # Job de déploiement (seulement sur main)
  deploy:
    name: 🚀 Déploiement Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Installer les dépendances
        run: npm ci

      - name: 🏗️ Build de l'application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: 📁 Créer l'archive de déploiement
        run: |
          tar -czf deploy.tar.gz \
            dist/ \
            server.js \
            package.json \
            package-lock.json \
            ecosystem.config.js \
            src/ \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.github \
            --exclude=scripts \
            --exclude=*.md

      - name: 🔐 Créer le fichier .env de production
        run: |
          cat > .env << EOF
          # Configuration Supabase
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
          
          # Configuration du serveur
          PORT=${{ secrets.PORT || '3001' }}
          NODE_ENV=production
          
          # Configuration de sécurité
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ADMIN_TOKEN_SECRET=${{ secrets.ADMIN_TOKEN_SECRET }}
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          API_KEY=${{ secrets.API_KEY }}
          ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
          EOF

      - name: 📂 Transférer les fichiers via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_PORT || '22' }}
          source: "deploy.tar.gz,.env"
          target: ${{ secrets.DEPLOY_PATH }}/current/

      - name: 🔧 Installation et démarrage
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_PORT || '22' }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}/current
            
            # Extraire l'archive
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz
            
            # Installer les dépendances de production
            npm ci --production
            
            # Installer PM2 si nécessaire
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi
            
            # Démarrage avec PM2 et configuration ecosystem
            if [ -f "ecosystem.config.js" ]; then
              pm2 start ecosystem.config.js --env production
            else
              pm2 start server.js --name "ux-jobs-pro" --env production
            fi
            
            # Sauvegarder la configuration PM2
            pm2 save
            pm2 startup

  # Job de notification simple
  notify:
    name: ✅ Déploiement Terminé
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
      - name: 📋 Résumé du déploiement
        run: |
          echo "🚀 Déploiement UX Jobs Pro terminé"
          echo "Status: ${{ job.status }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
