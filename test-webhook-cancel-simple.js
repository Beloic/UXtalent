#!/usr/bin/env node

/**
 * Test simple du webhook d'annulation avec p√©riode de 30 jours
 * Ce script simule directement le webhook sans utiliser l'API Stripe
 */

console.log('üß™ Test simple du webhook d\'annulation avec p√©riode de 30 jours');
console.log('===============================================================');

// Simuler un √©v√©nement customer.subscription.deleted avec p√©riode de 30 jours
const testEvent = {
  id: 'evt_test_cancel_30days',
  object: 'event',
  api_version: '2020-08-27',
  created: Math.floor(Date.now() / 1000),
  data: {
    object: {
      id: 'sub_test_cancel_30days',
      object: 'subscription',
      customer: 'cus_test_cancel_30days',
      status: 'canceled',
      cancel_at_period_end: true,
      current_period_end: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // Dans 30 jours
      current_period_start: Math.floor(Date.now() / 1000) - (30 * 24 * 60 * 60), // Il y a 30 jours
      created: Math.floor(Date.now() / 1000) - (30 * 24 * 60 * 60),
      canceled_at: Math.floor(Date.now() / 1000),
      items: {
        data: [{
          id: 'si_test_cancel_30days',
          object: 'subscription_item',
          price: {
            id: 'price_premium_candidat',
            object: 'price',
            amount: 499,
            currency: 'eur'
          }
        }]
      }
    }
  },
  livemode: false,
  pending_webhooks: 1,
  request: {
    id: 'req_test_cancel_30days',
    idempotency_key: null
  },
  type: 'customer.subscription.deleted'
};

console.log('üì° Simulation du webhook customer.subscription.deleted');
console.log('üìã Type d\'√©v√©nement:', testEvent.type);
console.log('üë§ Customer ID:', testEvent.data.object.customer);
console.log('üí≥ Subscription ID:', testEvent.data.object.id);
console.log('üìÖ P√©riode de facturation:');
console.log('   - D√©but:', new Date(testEvent.data.object.current_period_start * 1000));
console.log('   - Fin:', new Date(testEvent.data.object.current_period_end * 1000));
console.log('üìÖ Annul√© le:', new Date(testEvent.data.object.canceled_at * 1000));
console.log('üîÑ Statut:', testEvent.data.object.status);
console.log('‚ùå Annulation programm√©e:', testEvent.data.object.cancel_at_period_end);

// Simuler l'appel au webhook handler
console.log('\nüì° Envoi du webhook vers localhost:3001/api/stripe/webhook');

fetch('http://localhost:3001/api/stripe/webhook', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'stripe-signature': 't=1234567890,v1=test_signature'
  },
  body: JSON.stringify(testEvent)
})
.then(response => {
  console.log('üì° R√©ponse du webhook:', response.status, response.statusText);
  return response.text();
})
.then(data => {
  console.log('üìÑ Contenu de la r√©ponse:', data);
  
  if (data.includes('succ√®s') || data.includes('success')) {
    console.log('\n‚úÖ Test r√©ussi ! Le webhook a √©t√© trait√© correctement.');
    console.log('\nüîç V√©rifications √† faire:');
    console.log('1. V√©rifier que le plan de l\'utilisateur est pass√© √† "free"');
    console.log('2. V√©rifier les logs du serveur pour confirmer le traitement');
    console.log('3. V√©rifier que l\'utilisateur garde l\'acc√®s jusqu\'√† la fin de p√©riode');
  } else {
    console.log('\n‚ö†Ô∏è Le webhook a √©t√© re√ßu mais la r√©ponse n\'indique pas un succ√®s clair.');
  }
})
.catch(error => {
  console.log('‚ùå Erreur lors de l\'envoi du webhook:', error.message);
  console.log('\nüîß V√©rifications √† faire:');
  console.log('1. V√©rifier que le serveur local est d√©marr√© sur le port 3001');
  console.log('2. V√©rifier que l\'endpoint /api/stripe/webhook existe');
  console.log('3. V√©rifier les logs du serveur pour les erreurs');
});

// Simuler aussi un √©v√©nement customer.subscription.updated avec statut canceled
console.log('\nüì° Simulation du webhook customer.subscription.updated (statut: canceled)');

const testEventUpdated = {
  id: 'evt_test_cancel_30days_updated',
  object: 'event',
  api_version: '2020-08-27',
  created: Math.floor(Date.now() / 1000),
  data: {
    object: {
      id: 'sub_test_cancel_30days',
      object: 'subscription',
      customer: 'cus_test_cancel_30days',
      status: 'canceled',
      cancel_at_period_end: true,
      current_period_end: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60),
      current_period_start: Math.floor(Date.now() / 1000) - (30 * 24 * 60 * 60),
      created: Math.floor(Date.now() / 1000) - (30 * 24 * 60 * 60),
      items: {
        data: [{
          id: 'si_test_cancel_30days',
          object: 'subscription_item',
          price: {
            id: 'price_premium_candidat',
            object: 'price',
            amount: 499,
            currency: 'eur'
          }
        }]
      }
    }
  },
  livemode: false,
  pending_webhooks: 1,
  request: {
    id: 'req_test_cancel_30days_updated',
    idempotency_key: null
  },
  type: 'customer.subscription.updated'
};

// Attendre un peu avant d'envoyer le deuxi√®me webhook
setTimeout(() => {
  fetch('http://localhost:3001/api/stripe/webhook', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'stripe-signature': 't=1234567890,v1=test_signature'
    },
    body: JSON.stringify(testEventUpdated)
  })
  .then(response => {
    console.log('üì° R√©ponse du webhook updated:', response.status, response.statusText);
    return response.text();
  })
  .then(data => {
    console.log('üìÑ Contenu de la r√©ponse updated:', data);
  })
  .catch(error => {
    console.log('‚ùå Erreur lors de l\'envoi du webhook updated:', error.message);
  });
}, 2000);

console.log('\n‚è≥ Test en cours... V√©rifiez les logs du serveur pour voir le traitement des webhooks.');
