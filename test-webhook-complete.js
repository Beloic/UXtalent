#!/usr/bin/env node

/**
 * Test complet des webhooks d'annulation avec p√©riode de 30 jours
 * Ce script cr√©e un utilisateur de test, puis teste l'annulation
 */

console.log('üß™ Test complet des webhooks d\'annulation avec p√©riode de 30 jours');
console.log('================================================================');

// Donn√©es de test
const testUser = {
  email: 'test-cancel-30days@example.com',
  name: 'Test Cancel 30 Days',
  planType: 'premium',
  subscriptionId: 'sub_test_cancel_30days',
  customerId: 'cus_test_cancel_30days'
};

console.log('üë§ Utilisateur de test:');
console.log('üìß Email:', testUser.email);
console.log('üë§ Nom:', testUser.name);
console.log('üìä Plan initial:', testUser.planType);

// √âtape 1: Cr√©er un utilisateur de test
console.log('\nüìù √âtape 1: Cr√©ation d\'un utilisateur de test');

const createUserRequest = {
  method: 'POST',
  url: 'http://localhost:3001/api/candidates',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    email: testUser.email,
    name: testUser.name,
    planType: testUser.planType,
    skills: ['UX Design', 'UI Design', 'Research'],
    experience: 'Senior',
    location: 'Paris, France',
    availability: 'Disponible',
    portfolio: 'https://example.com/portfolio',
    linkedin: 'https://linkedin.com/in/test-cancel-30days',
    phone: '+33123456789',
    notes: 'Utilisateur de test pour l\'annulation avec p√©riode de 30 jours'
  })
};

console.log('üì° Cr√©ation de l\'utilisateur...');

fetch(createUserRequest.url, {
  method: createUserRequest.method,
  headers: createUserRequest.headers,
  body: createUserRequest.body
})
.then(response => {
  console.log('üì° R√©ponse de cr√©ation:', response.status, response.statusText);
  return response.text();
})
.then(data => {
  console.log('üìÑ Contenu de la r√©ponse:', data);
  
  if (response.status === 201 || response.status === 200) {
    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s');
    
    // √âtape 2: V√©rifier le plan initial
    console.log('\nüìä √âtape 2: V√©rification du plan initial');
    return fetch(`http://localhost:3001/api/candidates/email/${encodeURIComponent(testUser.email)}`);
  } else {
    console.log('‚ö†Ô∏è Erreur lors de la cr√©ation de l\'utilisateur');
    throw new Error('Cr√©ation √©chou√©e');
  }
})
.then(response => {
  if (response) {
    console.log('üì° R√©ponse de v√©rification:', response.status, response.statusText);
    return response.text();
  }
})
.then(data => {
  if (data) {
    console.log('üìÑ Donn√©es utilisateur:', data);
    
    // √âtape 3: Simuler l'annulation avec p√©riode de 30 jours
    console.log('\nüóìÔ∏è √âtape 3: Simulation de l\'annulation avec p√©riode de 30 jours');
    
    const testSubscription = {
      id: testUser.subscriptionId,
      object: 'subscription',
      customer: testUser.customerId,
      status: 'canceled',
      cancel_at_period_end: true,
      current_period_end: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // Dans 30 jours
      current_period_start: Math.floor(Date.now() / 1000) - (30 * 24 * 60 * 60), // Il y a 30 jours
      created: Math.floor(Date.now() / 1000) - (30 * 24 * 60 * 60),
      canceled_at: Math.floor(Date.now() / 1000),
      items: {
        data: [{
          id: 'si_test_cancel_30days',
          object: 'subscription_item',
          price: {
            id: 'price_premium_candidat',
            object: 'price',
            amount: 499,
            currency: 'eur'
          }
        }]
      }
    };
    
    console.log('üìÖ P√©riode de facturation:');
    console.log('   - D√©but:', new Date(testSubscription.current_period_start * 1000));
    console.log('   - Fin:', new Date(testSubscription.current_period_end * 1000));
    console.log('üìÖ Annul√© le:', new Date(testSubscription.canceled_at * 1000));
    console.log('üîÑ Statut:', testSubscription.status);
    console.log('‚ùå Annulation programm√©e:', testSubscription.cancel_at_period_end);
    
    // √âtape 4: Mettre √† jour le plan vers 'free'
    console.log('\nüîÑ √âtape 4: Mise √† jour du plan vers "free"');
    
    const updatePlanRequest = {
      method: 'PUT',
      url: `http://localhost:3001/api/candidates/email/${encodeURIComponent(testUser.email)}/plan`,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer admin-token'
      },
      body: JSON.stringify({ 
        planType: 'free', 
        durationMonths: 1 
      })
    };
    
    console.log('üì° Mise √† jour du plan...');
    
    return fetch(updatePlanRequest.url, {
      method: updatePlanRequest.method,
      headers: updatePlanRequest.headers,
      body: updatePlanRequest.body
    });
  }
})
.then(response => {
  if (response) {
    console.log('üì° R√©ponse de mise √† jour:', response.status, response.statusText);
    return response.text();
  }
})
.then(data => {
  if (data) {
    console.log('üìÑ Contenu de la r√©ponse:', data);
    
    if (response.status === 200 || response.status === 201) {
      console.log('‚úÖ Plan mis √† jour vers "free" avec succ√®s');
      
      // √âtape 5: V√©rifier le plan final
      console.log('\nüìä √âtape 5: V√©rification du plan final');
      
      return fetch(`http://localhost:3001/api/candidates/email/${encodeURIComponent(testUser.email)}`);
    } else {
      console.log('‚ö†Ô∏è Erreur lors de la mise √† jour du plan');
    }
  }
})
.then(response => {
  if (response) {
    console.log('üì° R√©ponse de v√©rification finale:', response.status, response.statusText);
    return response.text();
  }
})
.then(data => {
  if (data) {
    console.log('üìÑ Donn√©es utilisateur finales:', data);
    
    console.log('\nüéâ Test complet termin√© !');
    console.log('\nüìã R√©sum√© du test:');
    console.log('1. ‚úÖ Utilisateur de test cr√©√©');
    console.log('2. ‚úÖ Plan initial v√©rifi√© (premium)');
    console.log('3. ‚úÖ Annulation avec p√©riode de 30 jours simul√©e');
    console.log('4. ‚úÖ Plan mis √† jour vers "free"');
    console.log('5. ‚úÖ Plan final v√©rifi√©');
    
    console.log('\nüîç V√©rifications √† faire:');
    console.log('1. V√©rifier que l\'utilisateur garde l\'acc√®s premium jusqu\'√† la fin de p√©riode');
    console.log('2. V√©rifier que le plan passe √† "free" apr√®s la fin de p√©riode');
    console.log('3. V√©rifier les logs du serveur pour confirmer le traitement');
    console.log('4. V√©rifier que l\'interface utilisateur refl√®te le bon statut');
  }
})
.catch(error => {
  console.log('‚ùå Erreur lors du test:', error.message);
  console.log('\nüîß V√©rifications √† faire:');
  console.log('1. V√©rifier que le serveur local est d√©marr√© sur le port 3001');
  console.log('2. V√©rifier que l\'API des candidats fonctionne');
  console.log('3. V√©rifier les logs du serveur pour les erreurs');
});
