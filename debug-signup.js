import { supabaseAdmin } from './src/config/supabase.js';

async function debugSignup() {
  try {
    console.log('üîç V√©rification des utilisateurs r√©cents dans auth.users...');
    
    // R√©cup√©rer les utilisateurs r√©cents
    const { data, error } = await supabaseAdmin.auth.admin.listUsers();
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
      return;
    }
    
    // Trier par date de cr√©ation (plus r√©cents en premier)
    const recentUsers = data.users
      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
      .slice(0, 5);
    
    console.log('üìã Les 5 utilisateurs les plus r√©cents:');
    recentUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.email}`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Cr√©√© le: ${user.created_at}`);
      console.log(`   Email confirm√©: ${user.email_confirmed_at ? 'Oui' : 'Non'}`);
      console.log(`   R√¥le: ${user.user_metadata?.role || 'Non d√©fini'}`);
      console.log(`   M√©tadonn√©es:`, user.user_metadata);
      console.log('');
    });
    
    // V√©rifier les candidats r√©cents
    console.log('üîç V√©rification des candidats r√©cents...');
    const { data: candidates, error: candidatesError } = await supabaseAdmin
      .from('candidates')
      .select('id, name, email, status, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (candidatesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des candidats:', candidatesError);
      return;
    }
    
    console.log('üìã Les 5 candidats les plus r√©cents:');
    candidates.forEach((candidate, index) => {
      console.log(`${index + 1}. ${candidate.name} (${candidate.email})`);
      console.log(`   ID: ${candidate.id} | Statut: ${candidate.status} | Cr√©√©: ${candidate.created_at}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error.message);
  }
}

debugSignup();
